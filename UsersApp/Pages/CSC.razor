@page "/CSC"

<Div Class="row">
    <h4 style="padding:2rem 0 1rem 0 !important;">Usuarios CSC</h4>
</Div>


<Div Class="row">
    <FocusTrap Active>
        <TextEdit Autofocus Class="col-6 background"
                  Placeholder="Buscar" @bind-Text="@SearchFilter">
        </TextEdit>
    </FocusTrap>
</Div>

<Div Class="col-9">
    <Div Class="row">
        <Paragraph Style="padding:4rem 0 1rem 0 !important;">A continuación se muestra el listado de usuarios correspondientes al <strong>CSC</strong></Paragraph>
    </Div>
</Div>

<DataGrid TItem="CSCUser" Data="UsersList" @bind-SelectedRow="@SelectedItem"
          Editable
          ShowPager
          PageSize=5
          Responsive="true"
          EditMode="DataGridEditMode.Popup"
          FixedHeader="true"
          Hoverable
          CommandMode="DataGridCommandMode.Commands"
          UseInternalEditing=true
          Style="margin-bottom: 0 !important;" UseValidation=true
          SelectedRowStyling="@OnSelectedRowStyling"
          RowStyling="@OnRowStyling"
          CustomFilter="@OnCustomFilter">

    <PopupTitleTemplate>
        <ModalTitle>
            Editar usuario
        </ModalTitle>
    </PopupTitleTemplate>
    <DataGridColumns>
        <DataGridColumn TItem="CSCUser" Field="@nameof(CSCUser.Name)" Caption="NOMBRE" TextAlignment="TextAlignment.Center" Editable />
        <DataGridColumn TItem="CSCUser" Field="@nameof(CSCUser.PositionId)" Caption="PUESTO" TextAlignment="TextAlignment.Center" Editable>
        </DataGridColumn>
        <DataGridColumn TItem="CSCUser" Field="@nameof(CSCUser.DepartmentId)" Caption="DEPARTAMENTO" TextAlignment="TextAlignment.Center" Editable>
            <DisplayTemplate>
                @{
                    var departmentId = (context as CSCUser)?.DepartmentId;
                    @(Departments.FirstOrDefault(x=>x.Id == departmentId)?.Name)
                }
            </DisplayTemplate>
            <EditTemplate>
                <SelectList TValue="int"
                            TItem="Department"
                            Data="@Departments"
                            Class="background"
                            TextField="@((item)=>item.Name)"
                            ValueField="@((item)=>item.Id)"
                            SelectedValue="@((int)((CellEditContext)context).CellValue)"
                            SelectedValueChanged="@(e => {context.CellValue = Convert.ToInt32(e);})" />
            </EditTemplate>
        </DataGridColumn>
        <DataGridColumn TItem="CSCUser" Field="@nameof(CSCUser.GroupId)" Caption="GRUPO" TextAlignment="TextAlignment.Center" Editable>
            <DisplayTemplate>
                @{
                    var groupId = (context as CSCUser)?.GroupId;
                    @(AllGroups.FirstOrDefault(x => x.Id == groupId)?.Name)
                }
            </DisplayTemplate>
            <EditTemplate>
                <SelectList TValue="int"
                            TItem="CSCGroups"
                            Data="@AllGroups"
                            Class="background"
                            TextField="@((item)=>item.Name)"
                            ValueField="@((item)=>item.Id)"
                            SelectedValue="@((int)((CellEditContext)context).CellValue)"
                            SelectedValueChanged="@(e => {context.CellValue = Convert.ToInt32(e);})" />
            </EditTemplate>
        </DataGridColumn>
        <DataGridCommandColumn>
            <NewCommandTemplate>
                <Button Color="Color.Primary" Clicked="@context.Clicked">Nuevo</Button>
            </NewCommandTemplate>
            <EditCommandTemplate>
                <Tooltip Fade Text="Editar" Placement="TooltipPlacement.Top">
                    <Button Style="min-width: 1rem !important; background-color: transparent !important; box-shadow: none !important;" Outline Clicked="@context.Clicked">
                        <Icon Name="@("fas fa-user-edit")" IconStyle="IconStyle.DuoTone" IconSize="IconSize.Large" Class="icons-color"></Icon>

                    </Button>
                </Tooltip>
            </EditCommandTemplate>
            <DeleteCommandTemplate>
                <Tooltip Fade Text="Eliminar" Placement="TooltipPlacement.Top">
                    <Button Style="min-width: 1rem !important; background-color: transparent !important; box-shadow: none !important;" Outline Clicked="@context.Clicked">
                        <Icon Name="@("fas fa-trash-alt")" IconStyle="IconStyle.DuoTone" IconSize="IconSize.Large" Class="icons-color"></Icon>
                    </Button>
                </Tooltip>
            </DeleteCommandTemplate>
            <SaveCommandTemplate>
                <Button ElementId="btnSave" Type="ButtonType.Submit" PreventDefaultOnSubmit Color="Color.Primary"
                        Clicked="@context.Clicked" Size="Size.Large">
                    Guardar
                </Button>
            </SaveCommandTemplate>
            <CancelCommandTemplate>
                <Button ElementId="btnCancel" Color="Color.Secondary" Clicked="@context.Clicked" Size="Size.Large">Cancelar</Button>
            </CancelCommandTemplate>
        </DataGridCommandColumn>
    </DataGridColumns>

</DataGrid>

@code {
    public List<CSCUser> UsersList = new();

    private CSCUser SelectedItem { get; set; }

    public String? SearchFilter { get; set; } = null;
    
    IList<CSCGroups> AllGroups;

    IList<Department> Departments;
    //static string[] Grupos = { "MCR_CAE", "MCR_CCUsuario", "MCR_Desembolso", "MCR_Ejecutivos", "MCR_MC", "MCR_Tesoreria" };
    //static IEnumerable<CSCGroups> IndexedGroups = Enumerable.Range(1, Grupos.Length).Select(x => new CSCGroups { Name = Grupos[x - 1], Id = x });




    protected override async Task OnInitializedAsync()
    {
        try
        {
            AllGroups = new List<CSCGroups>
            {
                new CSCGroups{Id=1,Name="MCR_CAE"},
                new CSCGroups{Id=2,Name="MCR_CCUsuario"},
                new CSCGroups{Id=3,Name="MCR_Desembolso"},
                new CSCGroups{Id=4,Name="MCR_Ejecutivos"},
                new CSCGroups{Id=5,Name="MCR_Tesoreria"},
                new CSCGroups{Id=6,Name="MCR_MC"}

            };

            Departments = new List<Department>

            {
                new Department{Id = 1, Name = "TI"},

                new Department{Id = 2 , Name = "Ventas"},

                new Department{Id = 3 , Name = "Otra área"}
            };

            await LoadUsers();
        }
        catch (Exception)
        {

            throw;
        }
    }

    async Task LoadUsers()
    {
        try
        {
            UsersList.Add(new CSCUser() { Id = 1, Name = "Luis Jorge Carrillo", PositionId = 1, DepartmentId = 1, GroupId = 6 });
            UsersList.Add(new CSCUser() { Id = 2, Name = "Rodolfo Pérez Diego", PositionId = 2, DepartmentId = 2, GroupId = 6 });
            UsersList.Add(new CSCUser() { Id = 3, Name = "José Escudero", PositionId = 3, DepartmentId = 3, GroupId = 6 });
            UsersList.Add(new CSCUser() { Id = 4, Name = "Jazmin Gayosso", PositionId = 4, DepartmentId = 4, GroupId = 6 });


        }
        catch (Exception ex)
        {

            throw;
        }
    }

    public static void OnSelectedRowStyling(CSCUser user, DataGridRowStyling style)
    {
        style.Color = Color.Secondary;
    }

    //Evento para pintar el fondo de la fila
    public static void OnRowStyling(CSCUser user, DataGridRowStyling style)
    {
        style.Background = Background.Default;
    }

    public Boolean OnCustomFilter(CSCUser model)
    {
        if (string.IsNullOrEmpty(SearchFilter))
            return true;
        else
        {
            return model.Name.Contains(SearchFilter, StringComparison.OrdinalIgnoreCase);
        }

    }
}
