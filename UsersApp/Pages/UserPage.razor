@page "/User"
<Div Class="col-9">
    <Div Class="row">
        <h4 style="padding:2rem 0 1rem 0 !important;">Administración de Usuarios</h4>
    </Div>


    <Div Class="row">
        <FocusTrap Active>
            <TextEdit Autofocus Class="col-6 background"
                      Placeholder="Buscar" @bind-Text="@SearchFilter">
            </TextEdit>
        </FocusTrap>
        <Div Class="col-6">
            <Select TValue="int" @bind-SelectedValue=@ApplicationFilter Class="col-6 background">
                <SelectItem TValue="int" Value=0>Seleccione Aplicación</SelectItem>
                <SelectItem TValue="int" Value=1>CSC</SelectItem>
                <SelectItem TValue="int" Value=2>SUC</SelectItem>
                <SelectItem TValue="int" Value=3>Desembolso Electrónico</SelectItem>
            </Select>
        </Div>
    </Div>
</Div>

<Div Class="col-9">
    <Div Class="row">
        <Paragraph Style="padding:4rem 0 1rem 0 !important;">A continuación se muestra el listado de usuarios</Paragraph>
    </Div>
</Div>

<DataGrid TItem="User" Data="UsersList" @bind-SelectedRow="@SelectedItem"
          Editable
          ShowPager
          PageSize=5
          Responsive="true"
          EditMode="DataGridEditMode.Popup"
          FixedHeader="true"
          Hoverable
          CommandMode="DataGridCommandMode.Commands"
          UseInternalEditing=true
          Style="margin-bottom: 0 !important;" UseValidation=true
          SelectedRowStyling="@OnSelectedRowStyling"
          RowStyling="@OnRowStyling"
          CustomFilter="@OnCustomFilter">
    <DataGridAggregates>
        <DataGridAggregate Field="@nameof(User.IsActive)" Aggregate="DataGridAggregateType.TrueCount">
            <DisplayTemplate>
                @($"Usuarios Activos: {context.Value}")
            </DisplayTemplate>
        </DataGridAggregate>
    </DataGridAggregates>

    <PopupTitleTemplate>
        <ModalTitle>
            Editar usuario
        </ModalTitle>
    </PopupTitleTemplate>
    <DataGridColumns>
        <DataGridColumn TItem="User" Field="@nameof(User.Name)" Caption="NOMBRE" TextAlignment="TextAlignment.Center" Editable />
        <DataGridColumn TItem="User" Field="@nameof(User.DepartmentId)" Caption="DEPARTAMENTO" TextAlignment="TextAlignment.Center" Editable>
            <DisplayTemplate>
                @{
                    var departmentId = (context as User)?.DepartmentId;
                    @(Departments.FirstOrDefault(x=>x.Id == departmentId)?.Name)
                }
            </DisplayTemplate>
            <EditTemplate>
                <SelectList TValue="int"
                            TItem="Department"
                            Data="@Departments"
                            Class="background"
                            TextField="@((item)=>item.Name)"
                            ValueField="@((item)=>item.Id)"
                            SelectedValue="@((int)((CellEditContext)context).CellValue)"
                            SelectedValueChanged="@(e => {context.CellValue = Convert.ToInt32(e);})" />
            </EditTemplate>
        </DataGridColumn>
        <DataGridColumn TItem="User" Field="@nameof(User.TitleId)" Caption="PUESTO" TextAlignment="TextAlignment.Center" Editable>
            <DisplayTemplate>
                @{
                    var titleId = (context as User)?.TitleId;
                    @(Titles.FirstOrDefault(x=>x.Id == titleId)?.Name)
                }
            </DisplayTemplate>
            <EditTemplate>
                <SelectList TValue="int"
                            TItem="Title"
                            Data="@Titles"
                            Class="background"
                            TextField="@((item)=>item.Name)"
                            ValueField="@((item)=>item.Id)"
                            SelectedValue="@((int)((CellEditContext)context).CellValue)"
                            SelectedValueChanged="@(e => {context.CellValue = Convert.ToInt32(e);})" />
            </EditTemplate>
        </DataGridColumn>
        <DataGridColumn TItem="User" Field="@nameof(User.RolId)" Caption="ROL" TextAlignment="TextAlignment.Center" Editable>
            <DisplayTemplate>
                @{
                    var rolId = (context as User)?.RolId;
                    @(Roles.FirstOrDefault(x => x.Id == rolId)?.Name)
                }
            </DisplayTemplate>
            <EditTemplate>
                <SelectList TValue="int"
                            TItem="Rol"
                            Data="@Roles"
                            Class="background"
                            TextField="@((item)=>item.Name)"
                            ValueField="@((item)=>item.Id)"
                            SelectedValue="@((int)((CellEditContext)context).CellValue)"
                            SelectedValueChanged="@(e => {context.CellValue = Convert.ToInt32(e);})" />
            </EditTemplate>
        </DataGridColumn>
        <DataGridColumn TItem="User" Field="@nameof(User.ApplicationId)" Caption="APLICACIÓN" TextAlignment="TextAlignment.Center" Editable>
            <DisplayTemplate>
                @{
                    var applicationId = (context as User)?.ApplicationId;
                    @(Applications.FirstOrDefault(x=>x.Id == applicationId)?.Name)
                }
            </DisplayTemplate>
            <EditTemplate>
                <SelectList TValue="int"
                            TItem="Application"
                            Data="@Applications"
                            Class="background"
                            TextField="@((item)=>item.Name)"
                            ValueField="@((item)=>item.Id)"
                            SelectedValue="@((int)((CellEditContext)context).CellValue)"
                            SelectedValueChanged="@(e => {context.CellValue = Convert.ToInt32(e);})" />
            </EditTemplate>
        </DataGridColumn>
        <DataGridCheckColumn TItem="User" Field="@nameof(User.IsActive)" Caption="ACTIVO" TextAlignment="TextAlignment.Center" Editable>
            <DisplayTemplate>
                <Check TValue="Boolean" Checked="@context.IsActive" Disabled />
            </DisplayTemplate>
            <EditTemplate>
                <Check TValue="Boolean" Checked="@((Boolean)((CellEditContext)context).CellValue)" CheckedChanged="@(e => {context.CellValue = Convert.ToBoolean(e);})" />
            </EditTemplate>
        </DataGridCheckColumn>
        <DataGridCommandColumn>
            <NewCommandTemplate>
                <Button Color="Color.Primary" Clicked="@context.Clicked">Nuevo</Button>
            </NewCommandTemplate>
            <EditCommandTemplate>
                <Tooltip Fade Text="Editar" Placement="TooltipPlacement.Top">
                    <Button Style="min-width: 1rem !important; background-color: transparent !important; box-shadow: none !important;" Outline Clicked="@context.Clicked">
                        <Icon Name="@("fas fa-user-edit")" IconStyle="IconStyle.DuoTone" IconSize="IconSize.Large" Class="icons-color"></Icon>
                    </Button>
                </Tooltip>
            </EditCommandTemplate>
            <DeleteCommandTemplate>
                <Tooltip Fade Text="Eliminar" Placement="TooltipPlacement.Top">
                    <Button Style="min-width: 1rem !important; background-color: transparent !important; box-shadow: none !important;" Outline Clicked="@context.Clicked">
                        <Icon Name="@("fas fa-trash-alt")" IconStyle="IconStyle.DuoTone" IconSize="IconSize.Large" Class="icons-color"></Icon>
                    </Button>
                </Tooltip>
            </DeleteCommandTemplate>
            <SaveCommandTemplate>
                <Button ElementId="btnSave" Type="ButtonType.Submit" PreventDefaultOnSubmit Color="Color.Primary"
                        Clicked="@context.Clicked" Size="Size.Large">
                    Guardar
                </Button>
            </SaveCommandTemplate>
            <CancelCommandTemplate>
                <Button ElementId="btnCancel" Color="Color.Secondary" Clicked="@context.Clicked" Size="Size.Large">Cancelar</Button>
            </CancelCommandTemplate>
        </DataGridCommandColumn>
    </DataGridColumns>

</DataGrid>


@code {

    public List<User> UsersList = new();

    private User SelectedItem { get; set; }

    public String? SearchFilter { get; set; } = null;

    public int ApplicationFilter { get; set; } = 0;

    IList<Department> Departments;

    IList<Title> Titles;

    IList<Rol> Roles;

    IList<Application> Applications;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            Applications = new List<Application>
    {
    new Application {Id=1, Name = "CSC"},
    new Application {Id=2, Name = "SUC"},
    new Application {Id=3, Name = "DESEMBOLSO ELECTRÓNICO"}
    };

            Departments = new List<Department>
    {
    new Department{Id = 1, Name = "TI"},
    new Department{Id = 2 , Name = "Ventas"},
    new Department{Id = 3 , Name = "Seguros"}
    };

            Titles = new List<Title>

    {
    new Title {Id = 1, Name = "Desarrollador"},

    new Title {Id = 2 , Name = "Ejecutivo"},

    new Title {Id = 3 , Name = "Ejecutivo 2"}
    };

            Roles = new List<Rol>
            {
                new Rol {Id = 1, Name = "MCR_CCUsuario"},
                new Rol {Id = 2, Name = "MCR_Ejecutivos"},
                new Rol {Id = 3, Name = "MCR_Tesorería"},
                new Rol {Id = 4, Name = "Autorizador"},
                new Rol {Id = 5, Name = "Generación Desembolso"}
            };

            UsersList = new List<User>
            {
                new User {Id=1, Name = "Luis Jorge Carrillo", ApplicationId = 1, DepartmentId = 1, RolId = 1, TitleId = 1, IsActive = false },
                new User {Id=1, Name = "Rodolfo Pérez", ApplicationId = 2, DepartmentId = 2, RolId = 2, TitleId = 2, IsActive = true },
                new User {Id=1, Name = "José Escudero", ApplicationId = 1, DepartmentId = 1, RolId = 1, TitleId = 1, IsActive = true },
                new User {Id=1, Name = "Ricardo Lomas", ApplicationId = 3, DepartmentId = 3, RolId = 3, TitleId = 3, IsActive = true },
                new User {Id=1, Name = "Jazmín Gayosso", ApplicationId = 2, DepartmentId = 3, RolId = 4, TitleId = 2, IsActive = false },


            };

        }
        catch (Exception ex)
        {
            throw;
        }
    }



    //async Task LoadUsers()
    //{
    //    try
    //    {
    //        UsersList.Add(new User() { Id = 1, Name = "Luis Jorge Carrillo", DepartmentId = 1, TitleId = 1, RolId = 1, ProfileId = 1, IsActive = true });
    //        UsersList.Add(new User() { Id = 1, Name = "Rodolfo Pérez", DepartmentId = 2, TitleId = 2, RolId = 2, ProfileId = 2, IsActive = true });
    //        UsersList.Add(new User() { Id = 1, Name = "Ricardo Lomas", DepartmentId = 3, TitleId = 3, RolId = 3, ProfileId = 3, IsActive = true });
    //        UsersList.Add(new User() { Id = 1, Name = "Jazmin Gayosso", DepartmentId = 4, TitleId = 4, RolId = 4, ProfileId = 4, IsActive = true });
    //    }
    //    catch (Exception ex)
    //    {

    //        throw;
    //    }
    //}

    public static void OnSelectedRowStyling(User user, DataGridRowStyling style)
    {
        style.Color = Color.Secondary;
    }

    //Evento para pintar el fondo de la fila
    public static void OnRowStyling(User user, DataGridRowStyling style)
    {
        style.Background = Background.Default;
    }

    public Boolean OnCustomFilter(User model)
    {
        if (string.IsNullOrEmpty(SearchFilter) && ApplicationFilter == 0)
            return true;

        if (SearchFilter != null && ApplicationFilter == 0)
        {
            return model.Name.Contains(SearchFilter, StringComparison.OrdinalIgnoreCase);
        }

        if (SearchFilter != null && ApplicationFilter != 0)
        {
            return model.Name.Contains(SearchFilter, StringComparison.OrdinalIgnoreCase) && (model.ApplicationId == ApplicationFilter) == true;
        }

        if (SearchFilter == null && ApplicationFilter != 0)
            return (model.ApplicationId == ApplicationFilter) == true;

        return true;

    }
}
